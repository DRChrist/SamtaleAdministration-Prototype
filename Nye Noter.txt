Arbejde på at lære koncepter i nær tilknytning til problemet med modulære indholdstyper:
	Forsøge at lære designpatterns, ikke bare læse om dem.
	Er der noget databasestruktur eller datastruktur jeg kan undersøge?


Visse dele er nemmere at vide hvad jeg skal skrive om, når jeg har kodet dem.

Hvad vil det sige at systemet skal distribueres gennem HTTP-protokollen?

BuildContentRow:
	How do we pass the resources?
		An array of objects.

	ResourceText: <textfield>
	ResourcePercent: <number>, needs checks for format
	ResourceCheckbox: <checkbox>, probably contains a corresponding array of strings.
	ResourceRadio: <radio>, contains a corresponding array of strings.
	(ResourceTextShort: <text>)


	Mon ikke det ville give mening at splitte spørgsmål og svar helt op? Så de trækker på forskellige resourcer?
	Eller måske skal jeg bare lave specifikke svar-ressourcer?

Question ressourcetyper:
overskrift, link

Answer ressourcetyper:
checkbox, radio, textlong, (billede, video, fil, link)

How many layouts would we need?
checkboxes
checkboxes + text/long text
radios
radios + text/long text
text
text + number
long text
long text + number
number

is that:
one resource plus a possible text?
or maybe
one resource plus a possible text OR a number.

And then maybe two layouts for the contentRow:
Question above and question in line

NOTE: Not saving the texts from checkbox and radio creation properly.
  Er der en struktur der fungerer som en slags gatekeeper. Tjekker hvilken information man kommer med og sender en på rette vej?
  Er det bare en switch case?

How to check objects? Maybe there is no simple solution?

Is it mostly just mindless hacking I need to do?

Check for undefined or 0 -> call functions to do what needs to be done.
The checks don't have to be in series.


_.forEach(contentRow, function(value) {

    })
     %>
    <%= contentRow.questionTexts[0].text %> <br>
    <%= contentRow.questionLinks[0].url %>
    <%= contentRow.questionHeads[0].text %>
    <%= contentRow.answerTexts[0].text %>
    <%= contentRow.answerPercents[0].number %>
    <%= contentRow.answerLongTexts[0].text %>
    <%= contentRow.answerCheckboxes[0] %>
    <%= contentRow.answerRadios[0] %>

Hvornår invitationen udsendes til medarbejderen defineres af attributen invitePeriod i Agenda, som angiver hvor mange dage før samtalens dato, invitationen udsendes. InvitePeriod definerer hvor lang tid der skal gå mellem samtaler. Det virker ikke optimalt at denne information er knyttet til et Agenda-objekt.
Enten er det okay fordi systemet venter til en ny runde begynder med at oprette nye meetingobjekter. Dette betyder dog at runder der trækker ud, kan udsætte samtaler, og at der ikke kan køre to runder på samme tid. Derfor vil det være nødvendigt med en rundedefinition der involverer en tidsperiode.
Eller også er det endnu værre fordi meetingobjekter bliver dannet på baggrund af seneste samtale. Og ændringer af inviteInterval tager derfor en ekstra runde at gennemføre. Men måske er det løst ved at man altid genberegner inviteInterval ved en
Scratch all that. Vi har jo altid en upcoming Agenda. Den kan jo bare altid bruges til at beregne datoer til samtaler der er knyttet til upcoming runde. Så når man ændrer upcoming samtaleforløb vil man blive nødt til at genberegne datoer.


Problemet er at der ikke er noget definerer et samtaleforløb som skabelon, så hvordan ved vi hvilket samtaleforløb er aktivt?
Vi ved heller ikke hvilket samtaleforløb der er upcoming eller hvornår et nyt samtaleforløb bliver upcoming.
Det virker som om der er to typer af ting her: Samtaleforløbsskabeloner og samtaleforløbsskemaer.

Løsningsforslag:
1. Lav et skabelon flag som kan rejses.
  Virker meget udynamisk. Det lyder ikke som en god løsning.
2. Lav en association til runde. De samtaleforløb der har en runde-association er vigtigt.
  Men har vi ikke måske en pool af mulige samtaleforløb? Hvordan adskiller vi dem fra alle de andre?
  Og hvorfor er dette bedre end 1.?
3. Builder-pattern?
